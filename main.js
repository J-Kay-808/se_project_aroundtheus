!function(){"use strict";class e{constructor(e,t,s){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=s}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_active")}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._deleteButton=this._cardElement.querySelector(".delete__button"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._cardTitleEl.textContent=this._name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this.disableButton()}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this.disableButton()})),this._setEventListeners(),this._toggleButtonState()}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}}class s{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t),this._closeButton=this._modalElement.querySelector(".modal__close"),this.close=this.close.bind(this)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleClickOverlay)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleClickOverlay)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleClickOverlay=e=>{e.target.classList.contains("modal")&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()}))}}class i extends s{constructor(e,t){super({modalSelector:e}),this._form=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputEl=this._modalElement.querySelectorAll(".modal__form-input")}_getInputValues(){return this._inputValues={},this._inputEl.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._form.reset(),this.close()}))}}class n{constructor(e){let{profileTitle:t,profileDescription:s}=e;this._name=document.querySelector(t),this._description=document.querySelector(s)}getUserInfo(){return this._userData={name:this._name.textContent,description:this._description.textContent},this._userData}setUserInfo(e){let{name:t,description:s}=e;this._name.textContent=t,this._description.textContent=s}}const r={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},o=(document.querySelector("#profile-title"),document.querySelector("#profile-description"),document.querySelector("#profile-edit-button")),l=(document.forms["profile-modal-form"],document.querySelector("#modal-title-input")),a=document.querySelector("#modal-description-input"),c=(document.querySelector("#card-title-input"),document.querySelector("#card-url-input"),document.querySelector("#add-card-modal"),document.forms["modal-add-form"],document.querySelector("#profile-add-button"));document.querySelectorAll(r.formSelector).forEach((e=>{new t(r,e).enableValidation()}));const d=new i("#profile-edit-modal",(function(e){_.setUserInfo({name:e.title,description:e.description}),d.close()})),u=new i("#add-card-modal",(function(e){const t=h({name:e.title,link:e.link});p.addItem(t),u.close()}));d.setEventListeners(),u.setEventListeners(),c.addEventListener("click",(()=>{u.open()}));const m=new class extends s{constructor(e){super({modalSelector:e})}open(e){this._description=this._modalElement.querySelector(".image__description"),this._image=this._modalElement.querySelector(".image__modal"),this._description.textContent=e.name,this._image.src=e.link,this._image.alt=e.name,super.open()}}("#image-modal");m.setEventListeners();const _=new n({profileTitle:".profile__title",profileDescription:".profile__description"});function h(t){return new e(t,"#card-template",E).getView()}const p=new class{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this._container.append(t)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],settings:r,renderer:h},".cards__list");function E(e,t){m.open(e,t)}p.renderItems(),new n("#modal-title-input","#modal-description-input"),o.addEventListener("click",(()=>{const e=_.getUserInfo();l.value=e.name,a.value=e.description,d.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,